AIC(fit_full_glm_1)
summary(fit_full_glm_1)
fit_full_glm_1_best
fit_full_glm_1_best <- step(fit_full_glm_1, direction = "both")
fit_full_glm_1_best <- step(fit_full_glm_1, direction = "both")
fit_full_glm_1_best
fit_full_glm_1_best <- step(fit_full_glm_1, direction = "both")
fit_full_glm_2
fit_full_glm_2 <- glm(Resp ~ . , data=training, family="binomial")
summary(fit_full_glm_2)
AIC(fit_full_glm_2)
fit_full_glm_2_best <- step(fit_full_glm_2, direction = "both")
AIC(fit_full_glm_1_best) # The smallest AIC, we should pick this one
AIC(fit_full_glm_1)
fit_full_glm_1 <- train(Resp ~ ., method="glm", data=training)
summary(fit_full_glm_1)
fit_full_glm_1_best <- step(fit_full_glm_1, direction = "both")
fit_full_glm_1_best <- step(fit_full_glm_1, direction = "forward")
fit_full_glm_1_best <- step(fit_full_glm_1, direction = "backward")
fit_full_glm_1_best <- step(fit_full_glm_1, direction = "both")
fit_full_glm_1_best <- stepAIC(fit_full_glm_1, direction = "both")
?stepAIC
fit_full_glm_1_best <- stepAIC(fit_full_glm_1, direction = "both")
library("stepAIC")
install.packages("stepAIC")
library(stepAIC)
fit_full_glm_1_best <- stepAIC(fit_full_glm_1, direction = "both")
install.packages("MASS")
install.packages("MASS")
fit_full_glm_1_best <- stepAIC(fit_full_glm_1, direction = "both")
library(MASS)
fit_full_glm_1_best <- stepAIC(fit_full_glm_1, direction = "both")
fit_full_glm_1_best <- step(fit_full_glm_1, direction = "both")
AIC(fit_full_glm_2)
AIC(fit_full_glm_2_best) # The smallest AIC, we should pick this one
AIC(fit_full_glm_1)
AIC(fit_glm_1_sum)
fit_full_glm_2_best_test <- predict(fit_full_glm_2_best, testing)
sqrt(sum((fit_full_glm_2_best_test$Resp)^2))
fit_full_glm_2_best_test <- predict(fit_full_glm_2_best, testing)
fit_full_glm_2_best_test$Resp
fit_full_glm_2_best_test
fit_full_glm_2_best_test[2]
fit_full_glm_2_best_test
fit_full_glm_2_best_test^2
sqrt(sum((fit_full_glm_2_best_test)^2))
table(training$Resp, fit_full_glm_2_best_test > 0.5)
fit_full_glm_2_best_test <- predict(fit_full_glm_2_best, testing)
fit_full_glm_2_best_test
length(fit_full_glm_2_best_test)
table(testing$Resp, fit_full_glm_2_best_test > 0.5)
?table
table(testing$Resp, fit_full_glm_2_best_test > 1)
fit_full_glm_2_best_test <- predict(fit_full_glm_2_best, newdata=testing, type="response")
fit_full_glm_2_best_test
table(testing$Resp, fit_full_glm_2_best_test > 0.5)
testing$Resp
table(testing$Resp, fit_full_glm_2_best_test > 0.9)
table(testing$Resp, fit_full_glm_2_best_test > 0.5)
fit_full_glm_2_best_test
table(testing$Resp, fit_full_glm_2_best_test > 0.5)
testing$Resp
fit_full_glm_2_best_test[1]
for (i in 1:length(testing)){
if (fit_full_glm_2_best_test[i] > 0.5) {
testting$Resp2[i] <- 1
}
}
for (i in 1:length(testing)){
if (fit_full_glm_2_best_test[i] > 0.5) {
testing$Resp2[i] <- 1
}
}
length(testing)
for (i in 1:nrow(testing)){
if (fit_full_glm_2_best_test[i] > 0.5) {
testing$Resp2[i] <- 1
}
}
nrow(testing)
testing$Resp2 <- 0
head(testing)
for (i in 1:nrow(testing)){
if (fit_full_glm_2_best_test[i] > 0.5) {
testing$Resp2[i] <- 1
}
}
head(testing)
table(testing$Resp, testing$Resp2)
table(testing$Resp, fit_full_glm_2_best_test > 0.5)
testing$Resp2 <- factor(testing$Resp2)
testing$Resp[1] == testing$Resp2[1]
testing$Resp[1] == testing$Resp2[10]
testing$Resp[1] == testing$Resp2[34]
testing$Resp[1] == testing$Resp2[39]
testing$Resp[1]
testing$Resp2[39]
testing$Resp2[40]
testing$Resp2
testing$Resp[1] == testing$Resp2[2]
testing$Res <- FALSE
for (i in 1:nrow(testing)){
if (testing$Resp[i] == testing$Resp2[i]) {
testing$Res[i] <- TRUE
}
}
sum(testing$Res)
testing$Res
233/299
table(testing$Resp, fit_full_glm_2_best_test > 0.5)
table(testing$Resp, fit_full_glm_2_best_test > 0.6)
table(testing$Resp, fit_full_glm_2_best_test > 0.5)
testing$Resp
testing$Resp2
299-233
table(testing$Resp, fit_full_glm_2_best_test > 0.5)
setwd("~/Documents/My Courses/Data Science/8. Practical Machine Learning/Exercises/Course Project")
training <- read.csv("pml-training.csv", header=TRUE)
testing <- read.csv("pml-testing.csv", header=TRUE)
training <- read.csv("pml-training.csv", header=TRUE)
testing <- read.csv("pml-testing.csv", header=TRUE)
View(training)
?nearZeroVar
View(training)
nzv <- nearZeroVar(myTraining, saveMetrics=TRUE)
nzv <- nearZeroVar(myTraining, saveMetrics=TRUE)
library(lattice)
library(ggplot2)
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
library(randomForest)
library(lattice)
library(ggplot2)
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
library(randomForest)
set.seed(123)
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
myTraining <- training[inTrain, ]
myTesting <- training[-inTrain, ]
dim(myTraining)
dim(myTesting)
nzv <- nearZeroVar(myTraining, saveMetrics=TRUE)
View(myTraining)
View(nzv)
View(myTraining)
myTraining <- myTraining[,nzv$nzv==FALSE]
View(myTraining)
nzv<- nearZeroVar(myTesting,saveMetrics=TRUE)
myTesting <- myTesting[,nzv$nzv==FALSE]
myTraining <- myTraining[c(-1)]
trainingV3 <- myTraining
for(i in 1:length(myTraining)) {
if( sum( is.na( myTraining[, i] ) ) /nrow(myTraining) >= .7) {
for(j in 1:length(trainingV3)) {
if( length( grep(names(myTraining[i]), names(trainingV3)[j]) ) == 1)  {
trainingV3 <- trainingV3[ , -j]
}
}
}
}
myTraining <- trainingV3
rm(trainingV3)
clean1 <- colnames(myTraining)
clean2 <- colnames(myTraining[, -58])  # remove the classe column
myTesting <- myTesting[clean1]         # allow only variables in myTesting that are also in myTraining
testing <- testing[clean2]             # allow only variables in testing that are also in myTraining
dim(myTesting)
dim(testing)
for (i in 1:length(testing) ) {
for(j in 1:length(myTraining)) {
if( length( grep(names(myTraining[i]), names(testing)[j]) ) == 1)  {
class(testing[j]) <- class(myTraining[i])
}
}
}
testing <- rbind(myTraining[2, -58] , testing)
testing <- testing[-1,]
View(myTraining)
set.seed(1234)
modFitA1 <- rpart(classe ~ ., data=myTraining, method="class")
fancyRpartPlot(modFitA1)
set.seed(123)
fit_full_rpart <- rpart(Resp ~ ., data=training, method="class")
library(caret)
setwd("~/Documents/My Projects/Predict HIV Progression")
hiv_train <- read.csv("training_data.csv", header=TRUE)
hiv_train$Resp <- factor(hiv_train$Resp)
alaA <- c(c("GCT","GCC","GCA"), c("GCG","GCN"), c("GCU")) # Alanine
argR <- c(c("CGT","CGC","CGA","CGG","AGA","AGG"),
c("CGN","MGR"), c("CGU")) # Arginine
asnN <- c(c("AAT","AAC"), c("AAY")) # Asparagine
aspD <- c(c("GAT","GAC"), c("GAY"), c("GAU")) # Aspartic acid
cysC <- c(c("TGT","TGC"), c("TGY"), c("UGU", "UGC")) # Cysteine
ginQ <- c(c("CAA","CAG"), c("CAR")) # Glutamine
gluE <- c(c("GAA","GAG"), c("GAR")) # Glutamic acid
glyG <- c(c("GGT","GGC","GGA","GGG"), c("GGN"), c("GGU")) # Glycine
hisH <- c(c("CAT","CAC"), c("CAY"), c("CAU")) # Histidine
iieI <- c(c("ATT","ATC","ATA"), c("ATH"), c("AUU", "AUC", "AUA")) # Isoleucine
startC <- c(c("ATG")) # start1
leuL <- c(c("TTA","TTG","CTT","CTC","CTA","CTG"), c("YTR","CTN"),
c("UUA","UUG","CUU","CUC","CUA","CUG")) # Leucine
lysK <- c(c("AAA","AAG"), c("AAR")) # Lysine
metM <- c(c("ATG"), c("AUG")) # Methionine
pheF <- c(c("TTT","TTC"), c("TTY"), c("UUU","UUC")) # Phenylalanine
proP <- c(c("CCT","CCC","CCA","CCG"), c("CCN"), c("CCU")) # Proline
serS <- c(c("TCT","TCC","TCA","TCG","AGT","AGC"), c("TCN","AGY"),
c("UCU","UCC","UCA","UCG")) # Serine
thrT <- c(c("ACT","ACC","ACA","ACG"), c("ACN"), c("ACU")) # Threonine
trpW <- c(c("TGG"), c("UGG")) # Tryptophan
tyrY <- c(c("TAT","TAC"), c("TAY"), c("UAU","UAC")) # Tyrosine
valV <- c(c("GTT","GTC","GTA","GTG"), c("GTN"), c("GUU","GUC","GUA","GUG")) # Valine
stopC <- c(c("TAA","TGA","TAG"), c("TAR","TRA"), c("UAA","UAG","UGA")) # Stopp1
alanineRT <- 0; arginineRT <- 0; asparagineRT <- 0;
asparticAcidRT <- 0; cysteineRT <- 0; glutamineRT <- 0;
glutaminAcidRT <- 0; glycineRT <- 0; histidineRT <- 0;
isoleucineRT <- 0; leucineRT <- 0; lysineRT <- 0;
methionineRT <- 0; phenylalanineRT <- 0; prolineRT <- 0;
serineRT <- 0; threonineRT <- 0; tryptophanRT <- 0;
tyrosineRT <- 0; valineRT <- 0; startCodonRT <- 0;
stopCodonRT <- 0;
alaninePR <- 0; argininePR <- 0; asparaginePR <- 0;
asparticAcidPR <- 0; cysteinePR <- 0; glutaminePR <- 0;
glutaminAcidPR <- 0; glycinePR <- 0; histidinePR <- 0;
isoleucinePR <- 0; leucinePR <- 0; lysinePR <- 0;
methioninePR <- 0; phenylalaninePR <- 0; prolinePR <- 0;
serinePR <- 0; threoninePR <- 0; tryptophanPR <- 0;
tyrosinePR <- 0; valinePR <- 0; startCodonPR <- 0;
stopCodonPR <- 0;
hiv_train$alanineRT <- 0; hiv_train$arginineRT <- 0;  hiv_train$asparagineRT <- 0;
hiv_train$asparticAcidRT <- 0; hiv_train$cysteineRT <- 0; hiv_train$glutamineRT <- 0;
hiv_train$glutaminAcidRT <- 0; hiv_train$glycineRT <- 0;hiv_train$histidineRT <- 0;
hiv_train$isoleucineRT <- 0; hiv_train$leucineRT <- 0; hiv_train$lysineRT <- 0;
hiv_train$methionineRT <- 0; hiv_train$phenylalanineRT <- 0; hiv_train$prolineRT <- 0;
hiv_train$serineRT <- 0; hiv_train$threonineRT <- 0; hiv_train$tryptophanRT <- 0;
hiv_train$tyrosineRT <- 0; hiv_train$valineRT <- 0; hiv_train$startCodonRT <- 0;
hiv_train$stopCodonRT <- 0;
hiv_train$alaninePR <- 0; hiv_train$argininePR <- 0; hiv_train$asparaginePR <- 0;
hiv_train$asparticAcidPR <- 0; hiv_train$cysteinePR <- 0; hiv_train$glutaminePR <- 0;
hiv_train$glutaminAcidPR <- 0; hiv_train$glycinePR <- 0;hiv_train$histidinePR <- 0;
hiv_train$isoleucinePR <- 0; hiv_train$leucinePR <- 0; hiv_train$lysinePR <- 0;
hiv_train$methioninePR <- 0;  hiv_train$phenylalaninePR <- 0; hiv_train$prolinePR <- 0;
hiv_train$serinePR <- 0;  hiv_train$threoninePR <- 0; hiv_train$tryptophanPR <- 0;
hiv_train$tyrosinePR <- 0;  hiv_train$valinePR <- 0; hiv_train$startCodonPR <- 0;
hiv_train$stopCodonPR <- 0;
hiv_train$totalSeqRT <- 0; hiv_train$totalCodonRT <- 0;
hiv_train$totalSeqPR <- 0; hiv_train$totalCodonPR <- 0;
# source("dnaRT.R")
# debug(dnaRT)
# hiv_train1 <- dnaRT(hiv_train)
# undebug(dnaRT)
#
# source("dnaPR.R")
# debug(dnaPR)
# hiv_train2 <- dnaPR(hiv_train1)
# undebug(dnaPR)
source("dnaRT.R")
hiv_train1 <- dnaRT(hiv_train)
write.table(hiv_train1, "hiv_train1.csv", sep=",")
source("dnaPR.R")
hiv_train2 <- dnaPR(hiv_train1)
write.table(hiv_train2, "hiv_train2.csv", sep=",")
hiv_train2$alanine <- hiv_train2$alanineRT + hiv_train2$alaninePR
hiv_train2$arginine <- hiv_train2$arginineRT + hiv_train2$argininePR
hiv_train2$asparagine  <- hiv_train2$asparagineRT + hiv_train2$asparaginePR
hiv_train2$asparticAcid <- hiv_train2$asparticAcidRT + hiv_train2$asparticAcidPR
hiv_train2$cysteine <- hiv_train2$cysteineRT + hiv_train2$cysteinePR
hiv_train2$glutamine <- hiv_train2$glutamineRT + hiv_train2$glutaminePR
hiv_train2$glutaminAcid <- hiv_train2$glutaminAcidRT + hiv_train2$glutaminAcidPR
hiv_train2$glycine <- hiv_train2$glycineRT + hiv_train2$glycinePR
hiv_train2$histidine <- hiv_train2$histidineRT + hiv_train2$histidinePR
hiv_train2$isoleucine <- hiv_train2$isoleucineRT + hiv_train2$isoleucinePR
hiv_train2$leucine <- hiv_train2$leucineRT + hiv_train2$leucinePR
hiv_train2$lysine <- hiv_train2$lysineRT + hiv_train2$lysinePR
hiv_train2$methionine <- hiv_train2$methionineRT + hiv_train2$methioninePR
hiv_train2$phenylalanine <- hiv_train2$phenylalanineRT + hiv_train2$phenylalaninePR
hiv_train2$proline <- hiv_train2$prolineRT + hiv_train2$prolinePR
hiv_train2$serine <- hiv_train2$serineRT + hiv_train2$serinePR
hiv_train2$threonine <- hiv_train2$threonineRT + hiv_train2$threoninePR
hiv_train2$tryptophan <- hiv_train2$tryptophanRT + hiv_train2$tryptophanPR
hiv_train2$tyrosine <- hiv_train2$tyrosineRT + hiv_train2$tyrosinePR
hiv_train2$valine <- hiv_train2$valineRT + hiv_train2$valinePR
hiv_train2$startCodon <- hiv_train2$startCodonRT + hiv_train2$startCodonPR
hiv_train2$stopCodon <- hiv_train2$stopCodonRT + hiv_train2$stopCodonPR
hiv_train2$totalSeq <- hiv_train2$totalSeqRT + hiv_train2$totalSeqPR
hiv_train2$totalCondon <- hiv_train2$totalCodonRT + hiv_train2$totalCodonPR
hiv_train3 <- hiv_train2
hiv_train3$PatientID <- NULL
hiv_train3$PR.Seq <- NULL
hiv_train3$RT.Seq <- NULL
table(hiv_train3$Resp)
set.seed(1234) # you will need to shuffle it
inTrain <- createDataPartition(y=hiv_train3$Resp, p=0.7, list=FALSE)
training <- hiv_train3[inTrain,] # Training data - The first 70%?
testing <- hiv_train3[-inTrain,] # Testing data - The rest of 30%?
fit_full_glm_1 <- train(Resp ~ ., method="glm", data=training)
summary(fit_full_glm_1)
fit_full_glm_2 <- glm(Resp ~ . , data=training, family="binomial")
summary(fit_full_glm_2)
AIC(fit_full_glm_1)
AIC(fit_full_glm_2)
fit_full_glm_1 <- train(Resp ~ ., method="glm", data=training)
fit_full_glm_2_best <- step(fit_full_glm_2, direction = "both")
summary(fit_full_glm_2_best)
summary(fit_full_glm_2_best)
set.seed(123)
fit_full_rpart <- rpart(Resp ~ ., data=training, method="class")
fancyRpartPlot(fit_full_rpart)
plot(fit_full_rpart)
print(fit_full_rpart)
print(fit_full_rpart$finalModel)
print(fit_full_rpart)
plot(fit_full_rpart)
plot(fit_full_rpart)
fancyRpartPlot(fit_full_rpart)
plot(fit_full_rpart$finalModel)
fit_sum_rpart <- rpart(Resp ~ alanine + arginine + asparagine + asparticAcid +
cysteine + glutamine + glutaminAcid + glycine +
histidine + isoleucine + leucine + lysine +
methionine + phenylalanine + proline + serine +
threonine + tryptophan + tyrosine + valine +
stopCodon + startCodon + totalSeq + totalCondon,
method = "rpart", data=training)
fit_sum_rpart <- rpart(Resp ~ alanine + arginine + asparagine + asparticAcid +
cysteine + glutamine + glutaminAcid + glycine +
histidine + isoleucine + leucine + lysine +
methionine + phenylalanine + proline + serine +
threonine + tryptophan + tyrosine + valine +
stopCodon + startCodon + totalSeq + totalCondon,
data=training, method="class")
print(fit_sum_rpart)
plot(fit_sum_rpart)
fancyRpartPlot(fit_sum_rpart)
rpart.plot(fit_sum_rpart)
rpart.plot(fit_full_rpart)
library(rattle)
library(rpart.plot)
fit_full_rpart_test <- predict(fit_full_rpart, newdata=testing, type="response")
fit_full_rpart_test <- predict(fit_full_rpart, newdata=testing)
fit_full_rpart_test
testing
View(hiv_train2)
View(testing)
View(testing)
fit_full_rpart_test
View(fit_full_rpart_test)
nrow(testing)
testing[1]$row.names
testing[1]
testing[,1]$row.names
testing[1,]$row.names
testing[1,]
testing[1,]$row.names
testing$row.names
View(myTraining)
testing[1,]$Resp
testing$0
testing
fit_full_rpart_test
fit_full_rpart_test$row.names
fit_full_rpart_test$0
fit_full_rpart_test$"0"
fit_full_rpart_test
fit_full_rpart_test[1]
fit_full_rpart_test[,1]
fit_full_rpart_test[,2]
summary(fit_full_rpart_test)
print(fit_full_rpart_test)
rsq.rpart(fit_full_rpart_test)
rsq.rpart(fit_full_rpart)
rsq.rpart(fit_sum_rpart)
rsq.rpart(fit_full_rpart)
fit_full_rpart.rpart
tmp <- printcp(fit_full_rpart)
rsq.val <- 1-tmp[,c(3,4)]
rsq.val
rsq.rpart(fit_full_rpart)
rsq.val <- 1-tmp[,c(3,4)]
rsq.val
rsq.val <- 1-tmp[,c(3,4,5)]
rsq.val <- 1-tmp[,c(3,4)]
rsq.val
rsq.val.1
rsq.val.1 <- 1-tmp[,c(3,4,5)]
rsq.val.1
rsq.val.1 - rsq.val
rsq.val.1[3]
rsq.val.1[,3]
rsq.val.1[,1]
rsq.val.1[,3] + rsq.val.1[,1]
rsq.val.1[,3] + rsq.val.1[,1] < rsq.val.1[,2]
plotcp(fit_full_rpart)
rsq.rpart(fit_full_rpart)
plotcp(fit_full_rpart)
rsq.rpart(fit_sum_rpart)
plotcp(fit_sum_rpart)
tmp <- printcp(fit_sum_rpart)
rsq.val <- 1-tmp[,c(3,4)] ; rsq.val
rsq.val.1 <- 1-tmp[,c(3,4,5)] ; rsq.val.1
rsq.val.1[,3] + rsq.val.1[,1] < rsq.val.1[,2]
plotcp(fit_full_rpart)
plotcp(fit_sum_rpart)
rpart.plot(fit_sum_rpart)
summary(tree(fit_sum_rpart))
library(tree)
library(tree)
install.packages("tree")
library(tree)
summary(tree(fit_sum_rpart))
summary(tree(fit_full_rpart))
fit_full_rpart_test <- predict(fit_full_rpart, newdata=testing)
print(fit_full_rpart_test)
summary(fit_full_rpart_test)
rpart.plot(fit_full_rpart)
fancyRpartPlot(fit_full_rpart)
rpart.plot(fit_full_rpart)
cm_full_rpart <- confusionMatrix(fit_full_rpart_test, testing$Resp)
testing$Resp
fit_full_rpart_test
fit_full_rpart_test <- predict(fit_full_rpart, newdata=testing, type="class")
print(fit_full_rpart_test)
summary(fit_full_rpart_test)
cm_full_rpart <- confusionMatrix(fit_full_rpart_test, testing$Resp)
cm_full_rpart
(216 + 17) / 299
plot(cm_full_rpart, col = cm_full_rpart$byClass,
main = paste("Decision Tree Conusion Matrix: Accuray =",
round(cm_full_rpart$overall['Accuray'], 4)))
plot(cm_full_rpart$table, col = cm_full_rpart$byClass,
main = paste("Decision Tree Conusion Matrix: Accuray =",
round(cm_full_rpart$overall['Accuray'], 4)))
fit_full_rm <- randomForest(Resp ~ . , data=training, family="binomial")
summary(fit_full_rm)
library(caret)
fit_full_rm <- train(Resp ~. data=training, method="rf", prox=TRUE)
fit_full_rm <- train(Resp ~. , data=training, method="rf", prox=TRUE)
fit_full_rm_0 <- randomForest(Resp ~ . , data=training, family="binomial")
fit_ful_rm_0
summary(fit_full_rm_0)
summary(fit_full_rm)
getTree(fit_full_rm$finalModel, k=2)
fit_full_rm_0_test <- predict(fit_full_rm_0, testing, type="class")
fit_full_rm_0_test <- predict(fit_full_rm_0, testing, type="class")
cm_rm_0 <- confusionMatrix(fit_full_rm_0_test, testing$Resp)
cm_rm_0
fit_full_rm_test <- predict(fit_full_rm, testing, type="class")
cm_rm <- confusionMatrix(fit_full_rm_test, testing$Resp)
cm_rm
fit_full_rm_test <- predict(fit_full_rm, testing, type="class")
fit_full_rm_test <- predict(fit_full_rm, testing)
cm_rm <- confusionMatrix(fit_full_rm_test, testing$Resp)
cm_rm
plot(fit_full_rm_0_test)
plot(fit_full_rm_0)
cforest(fit_full_rm_0)
getTree(fit_full_rm_0, k, labelVar=TRUE)
plot.rf.tree(fit_full_rm_0)
getTree(fit_full_rm_0, labelVar=TRUE)
?cforest
install.packages("cforest")
library(cforest)
install.packages("party")
library(cforest)
library(cforest)
?cforest
library(tree)
cforest(fit_full_rm_0)
getTree(fit_full_rm_0, 1, labelVar=TRUE)
plot(fit_full_rm_0)
plot(fit_full_rm_0)
plot.rf.tree(fit_full_rm_0)
plot(fit_full_rm_0)
getTree(fit_full_rm_0, 1, labelVar=TRUE)
plot(getTree(fit_full_rm_0, 1, labelVar=TRUE))
getTree(fit_full_rm_0, 1, labelVar=TRUE)
length(getTree(fit_full_rm_0, 1, labelVar=TRUE))
nrow(getTree(fit_full_rm_0, 1, labelVar=TRUE))
getTree(fit_full_rm_0, 1)
getTree(fit_full_rm_0, 2, labelVar=TRUE)
getTree(fit_full_rm_0, 1, labelVar=TRUE)
getTree(fit_full_rm_0, 1, labelVar=TRUE)
plot(fit_full_rm_0)
getTree(fit_full_rm_0, 1, labelVar=TRUE)
plot(fit_full_rm_0)
plot(fit_full_rm_0)
getTree(fit_full_rm_0, 1, labelVar=TRUE)
plot(fit_full_rm_0)
getTree(fit_full_rm_0, 1, labelVar=TRUE)
plot(fit_full_rm_0)
cm_rm <- confusionMatrix(fit_full_rm_test, testing$Resp)
cm_rm
fit_full_gbm <- train(Resp ~. , data=training, method="gbm", verbose=FALSE)
rptin(fit_full_gbm)
print(fit_full_gbm)
fit_full_gbm_test <- predict(git_full_gbm, newdata=testing)
fit_full_gbm <- train(Resp ~. , data=training, method="gbm", verbose=FALSE)
print(fit_full_gbm)
fit_full_gbm_test <- predict(fit_full_gbm, newdata=testing)
cm_gbm <- confusionMatrix(fit_full_gbm_test, testing$Resp)
cm_gbm
plot(cm_gbm, ylim=c(0.9, 1))
plot(cm_gbm, ylim=c(0.9, 1))
plot(cm_gbm)
qplot(fit_full_gbm_test, wage, data=testing)
qplot(fit_full_gbm_test, Resp, data=testing)
plot(cm_gbm)
